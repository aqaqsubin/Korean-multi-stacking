발열 때문에 더이상 회로 집적도를 높일 수 없기 때문에 단일 코어 프로세서의 성능 향상은 한계에 달했다.

그래서 코어를 여러 개 사용하는 멀티 코어, 매니 코어 형태의 프로세서가 등장했으며 병렬 프로그래밍이 중요해졌다.

이러한 상황에서 병렬 프로그래밍에 여러 장점이 있는 순수 함수형 언어 Haskell이 주목받고 있다.

Haskell은 식 계산 방식에서 이미 병렬성이 내재되어 있으며 병렬 구조를 지원하는 모나드 도구를 제공한다.

그런데 Haskell 병렬 프로그램의 성능은 메모리 재사용 시스템을 포함한 실행시간 시스템에 큰 영향을 받는다.

이미 Haskell이 제공하는 메모리 프로파일링 도구로 GC-

tune이 있지만, GC-

tune은 가능한 모든 GC 옵션에 대해 프로그램 실행 시간을 반복 측정하기 때문에 GC 조정 시간이 너무 오래 걸린다.

그래서 본 연구에서는 기본적인 분할 정복법을 이용해서 GC-

tune의 탐색 영역을 매 단계마다 4분의 1로 줄이는 방법을 제안한다.

제안하는 방법을 두 가지 병렬 프로그램(극대 독립 집합 프로그램과 K-

평균 프로그램)에 적용한 결과, 평균 98%의 정확도로 실행 시간을 평균 7.78배 단축시켰다.

@highlight

본 연구에서는 기본적 분할 정복법을 이용해 GC-

@highlight

tune의 탐색 영역을 매 단계마다 4분의 1로 줄이는 방법을 제안했다.

@highlight

이를통해 두 가지 병렬 프로그램(극대 독립 집합 프로그램과 K-

@highlight

평균 프로그램)에 적용한 결과, 평균 98%의 정확도로 실행 시간을 평균 7.78배 단축시켰다.

